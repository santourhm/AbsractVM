
// Generated from /home/santourh/abstract-vm-32bits/grammar/VMGrammar.g4 by ANTLR 4.13.2


#include "VMGrammarLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct VMGrammarLexerStaticData final {
  VMGrammarLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  VMGrammarLexerStaticData(const VMGrammarLexerStaticData&) = delete;
  VMGrammarLexerStaticData(VMGrammarLexerStaticData&&) = delete;
  VMGrammarLexerStaticData& operator=(const VMGrammarLexerStaticData&) = delete;
  VMGrammarLexerStaticData& operator=(VMGrammarLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag vmgrammarlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<VMGrammarLexerStaticData> vmgrammarlexerLexerStaticData = nullptr;

void vmgrammarlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (vmgrammarlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(vmgrammarlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<VMGrammarLexerStaticData>(
    std::vector<std::string>{
      "OPP", "MUL", "QUO", "DIV", "ADD", "SUB", "REM", "WSTR", "LOAD", "NEW", 
      "CMP", "BRA", "SEQ", "SNE", "SLT", "SGT", "SGE", "SLE", "SOV", "SHL", 
      "SHR", "BEQ", "BNE", "BGE", "BLT", "BGT", "BLE", "BOV", "BSR", "RTS", 
      "STORE", "PUSH", "POP", "LEA", "PEA", "WINT", "WNL", "HALT", "WFLOAT", 
      "WTYPE", "WADDR", "SUBSP", "ADDSP", "TSTO", "RINT", "RFLOAT", "ERROR", 
      "COMMA", "OPARENT", "CPARENT", "HASH", "MINUS", "COLON", "RREGISTER", 
      "GBREGISTER", "LBREGISTER", "SPREGISTER", "VALLNULL", "STRING_LITERAL", 
      "INT", "FLOAT", "ID", "STRING", "COMMENT", "WS", "NEWLINE"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'OPP'", "'MUL'", "'QUO'", "'DIV'", "'ADD'", "'SUB'", "'REM'", 
      "'WSTR'", "'LOAD'", "'NEW'", "'CMP'", "'BRA'", "'SEQ'", "'SNE'", "'SLT'", 
      "'SGT'", "'SGE'", "'SLE'", "'SOV'", "'SHL'", "'SHR'", "'BEQ'", "'BNE'", 
      "'BGE'", "'BLT'", "'BGT'", "'BLE'", "'BOV'", "'BSR'", "'RTS'", "'STORE'", 
      "'PUSH'", "'POP'", "'LEA'", "'PEA'", "'WINT'", "'WNL'", "'HALT'", 
      "'WFLOAT'", "'WTYPE'", "'WADDR'", "'SUBSP'", "'ADDSP'", "'TSTO'", 
      "'RINT'", "'RFLOAT'", "'ERROR'", "','", "'('", "')'", "'#'", "'-'", 
      "':'", "", "'GB'", "'LB'", "'SP'", "'null'"
    },
    std::vector<std::string>{
      "", "OPP", "MUL", "QUO", "DIV", "ADD", "SUB", "REM", "WSTR", "LOAD", 
      "NEW", "CMP", "BRA", "SEQ", "SNE", "SLT", "SGT", "SGE", "SLE", "SOV", 
      "SHL", "SHR", "BEQ", "BNE", "BGE", "BLT", "BGT", "BLE", "BOV", "BSR", 
      "RTS", "STORE", "PUSH", "POP", "LEA", "PEA", "WINT", "WNL", "HALT", 
      "WFLOAT", "WTYPE", "WADDR", "SUBSP", "ADDSP", "TSTO", "RINT", "RFLOAT", 
      "ERROR", "COMMA", "OPARENT", "CPARENT", "HASH", "MINUS", "COLON", 
      "RREGISTER", "GBREGISTER", "LBREGISTER", "SPREGISTER", "VALLNULL", 
      "STRING_LITERAL", "INT", "FLOAT", "ID", "COMMENT", "WS", "NEWLINE"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,65,433,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
  	1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
  	7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
  	1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,
  	1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
  	1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
  	1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
  	1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
  	1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,
  	1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,
  	1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
  	1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,
  	1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,
  	1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,
  	1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,
  	1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,
  	1,57,1,58,1,58,1,58,1,58,1,59,4,59,381,8,59,11,59,12,59,382,1,60,4,60,
  	386,8,60,11,60,12,60,387,1,60,1,60,4,60,392,8,60,11,60,12,60,393,1,61,
  	1,61,5,61,398,8,61,10,61,12,61,401,9,61,1,62,1,62,1,62,5,62,406,8,62,
  	10,62,12,62,409,9,62,1,63,1,63,5,63,413,8,63,10,63,12,63,416,9,63,1,63,
  	1,63,1,64,4,64,421,8,64,11,64,12,64,422,1,64,1,64,1,65,3,65,428,8,65,
  	1,65,1,65,3,65,432,8,65,0,0,66,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
  	9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
  	21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
  	65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
  	44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
  	55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,0,127,63,129,
  	64,131,65,1,0,6,1,0,48,57,3,0,65,90,95,95,97,122,5,0,46,46,48,57,65,90,
  	95,95,97,122,2,0,34,34,92,92,2,0,10,10,13,13,2,0,9,9,32,32,441,0,1,1,
  	0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
  	13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
  	0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
  	0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
  	45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
  	0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
  	0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
  	77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
  	0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
  	0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,
  	0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,
  	0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,
  	0,0,131,1,0,0,0,1,133,1,0,0,0,3,137,1,0,0,0,5,141,1,0,0,0,7,145,1,0,0,
  	0,9,149,1,0,0,0,11,153,1,0,0,0,13,157,1,0,0,0,15,161,1,0,0,0,17,166,1,
  	0,0,0,19,171,1,0,0,0,21,175,1,0,0,0,23,179,1,0,0,0,25,183,1,0,0,0,27,
  	187,1,0,0,0,29,191,1,0,0,0,31,195,1,0,0,0,33,199,1,0,0,0,35,203,1,0,0,
  	0,37,207,1,0,0,0,39,211,1,0,0,0,41,215,1,0,0,0,43,219,1,0,0,0,45,223,
  	1,0,0,0,47,227,1,0,0,0,49,231,1,0,0,0,51,235,1,0,0,0,53,239,1,0,0,0,55,
  	243,1,0,0,0,57,247,1,0,0,0,59,251,1,0,0,0,61,255,1,0,0,0,63,261,1,0,0,
  	0,65,266,1,0,0,0,67,270,1,0,0,0,69,274,1,0,0,0,71,278,1,0,0,0,73,283,
  	1,0,0,0,75,287,1,0,0,0,77,292,1,0,0,0,79,299,1,0,0,0,81,305,1,0,0,0,83,
  	311,1,0,0,0,85,317,1,0,0,0,87,323,1,0,0,0,89,328,1,0,0,0,91,333,1,0,0,
  	0,93,340,1,0,0,0,95,346,1,0,0,0,97,348,1,0,0,0,99,350,1,0,0,0,101,352,
  	1,0,0,0,103,354,1,0,0,0,105,356,1,0,0,0,107,358,1,0,0,0,109,361,1,0,0,
  	0,111,364,1,0,0,0,113,367,1,0,0,0,115,370,1,0,0,0,117,375,1,0,0,0,119,
  	380,1,0,0,0,121,385,1,0,0,0,123,395,1,0,0,0,125,407,1,0,0,0,127,410,1,
  	0,0,0,129,420,1,0,0,0,131,431,1,0,0,0,133,134,5,79,0,0,134,135,5,80,0,
  	0,135,136,5,80,0,0,136,2,1,0,0,0,137,138,5,77,0,0,138,139,5,85,0,0,139,
  	140,5,76,0,0,140,4,1,0,0,0,141,142,5,81,0,0,142,143,5,85,0,0,143,144,
  	5,79,0,0,144,6,1,0,0,0,145,146,5,68,0,0,146,147,5,73,0,0,147,148,5,86,
  	0,0,148,8,1,0,0,0,149,150,5,65,0,0,150,151,5,68,0,0,151,152,5,68,0,0,
  	152,10,1,0,0,0,153,154,5,83,0,0,154,155,5,85,0,0,155,156,5,66,0,0,156,
  	12,1,0,0,0,157,158,5,82,0,0,158,159,5,69,0,0,159,160,5,77,0,0,160,14,
  	1,0,0,0,161,162,5,87,0,0,162,163,5,83,0,0,163,164,5,84,0,0,164,165,5,
  	82,0,0,165,16,1,0,0,0,166,167,5,76,0,0,167,168,5,79,0,0,168,169,5,65,
  	0,0,169,170,5,68,0,0,170,18,1,0,0,0,171,172,5,78,0,0,172,173,5,69,0,0,
  	173,174,5,87,0,0,174,20,1,0,0,0,175,176,5,67,0,0,176,177,5,77,0,0,177,
  	178,5,80,0,0,178,22,1,0,0,0,179,180,5,66,0,0,180,181,5,82,0,0,181,182,
  	5,65,0,0,182,24,1,0,0,0,183,184,5,83,0,0,184,185,5,69,0,0,185,186,5,81,
  	0,0,186,26,1,0,0,0,187,188,5,83,0,0,188,189,5,78,0,0,189,190,5,69,0,0,
  	190,28,1,0,0,0,191,192,5,83,0,0,192,193,5,76,0,0,193,194,5,84,0,0,194,
  	30,1,0,0,0,195,196,5,83,0,0,196,197,5,71,0,0,197,198,5,84,0,0,198,32,
  	1,0,0,0,199,200,5,83,0,0,200,201,5,71,0,0,201,202,5,69,0,0,202,34,1,0,
  	0,0,203,204,5,83,0,0,204,205,5,76,0,0,205,206,5,69,0,0,206,36,1,0,0,0,
  	207,208,5,83,0,0,208,209,5,79,0,0,209,210,5,86,0,0,210,38,1,0,0,0,211,
  	212,5,83,0,0,212,213,5,72,0,0,213,214,5,76,0,0,214,40,1,0,0,0,215,216,
  	5,83,0,0,216,217,5,72,0,0,217,218,5,82,0,0,218,42,1,0,0,0,219,220,5,66,
  	0,0,220,221,5,69,0,0,221,222,5,81,0,0,222,44,1,0,0,0,223,224,5,66,0,0,
  	224,225,5,78,0,0,225,226,5,69,0,0,226,46,1,0,0,0,227,228,5,66,0,0,228,
  	229,5,71,0,0,229,230,5,69,0,0,230,48,1,0,0,0,231,232,5,66,0,0,232,233,
  	5,76,0,0,233,234,5,84,0,0,234,50,1,0,0,0,235,236,5,66,0,0,236,237,5,71,
  	0,0,237,238,5,84,0,0,238,52,1,0,0,0,239,240,5,66,0,0,240,241,5,76,0,0,
  	241,242,5,69,0,0,242,54,1,0,0,0,243,244,5,66,0,0,244,245,5,79,0,0,245,
  	246,5,86,0,0,246,56,1,0,0,0,247,248,5,66,0,0,248,249,5,83,0,0,249,250,
  	5,82,0,0,250,58,1,0,0,0,251,252,5,82,0,0,252,253,5,84,0,0,253,254,5,83,
  	0,0,254,60,1,0,0,0,255,256,5,83,0,0,256,257,5,84,0,0,257,258,5,79,0,0,
  	258,259,5,82,0,0,259,260,5,69,0,0,260,62,1,0,0,0,261,262,5,80,0,0,262,
  	263,5,85,0,0,263,264,5,83,0,0,264,265,5,72,0,0,265,64,1,0,0,0,266,267,
  	5,80,0,0,267,268,5,79,0,0,268,269,5,80,0,0,269,66,1,0,0,0,270,271,5,76,
  	0,0,271,272,5,69,0,0,272,273,5,65,0,0,273,68,1,0,0,0,274,275,5,80,0,0,
  	275,276,5,69,0,0,276,277,5,65,0,0,277,70,1,0,0,0,278,279,5,87,0,0,279,
  	280,5,73,0,0,280,281,5,78,0,0,281,282,5,84,0,0,282,72,1,0,0,0,283,284,
  	5,87,0,0,284,285,5,78,0,0,285,286,5,76,0,0,286,74,1,0,0,0,287,288,5,72,
  	0,0,288,289,5,65,0,0,289,290,5,76,0,0,290,291,5,84,0,0,291,76,1,0,0,0,
  	292,293,5,87,0,0,293,294,5,70,0,0,294,295,5,76,0,0,295,296,5,79,0,0,296,
  	297,5,65,0,0,297,298,5,84,0,0,298,78,1,0,0,0,299,300,5,87,0,0,300,301,
  	5,84,0,0,301,302,5,89,0,0,302,303,5,80,0,0,303,304,5,69,0,0,304,80,1,
  	0,0,0,305,306,5,87,0,0,306,307,5,65,0,0,307,308,5,68,0,0,308,309,5,68,
  	0,0,309,310,5,82,0,0,310,82,1,0,0,0,311,312,5,83,0,0,312,313,5,85,0,0,
  	313,314,5,66,0,0,314,315,5,83,0,0,315,316,5,80,0,0,316,84,1,0,0,0,317,
  	318,5,65,0,0,318,319,5,68,0,0,319,320,5,68,0,0,320,321,5,83,0,0,321,322,
  	5,80,0,0,322,86,1,0,0,0,323,324,5,84,0,0,324,325,5,83,0,0,325,326,5,84,
  	0,0,326,327,5,79,0,0,327,88,1,0,0,0,328,329,5,82,0,0,329,330,5,73,0,0,
  	330,331,5,78,0,0,331,332,5,84,0,0,332,90,1,0,0,0,333,334,5,82,0,0,334,
  	335,5,70,0,0,335,336,5,76,0,0,336,337,5,79,0,0,337,338,5,65,0,0,338,339,
  	5,84,0,0,339,92,1,0,0,0,340,341,5,69,0,0,341,342,5,82,0,0,342,343,5,82,
  	0,0,343,344,5,79,0,0,344,345,5,82,0,0,345,94,1,0,0,0,346,347,5,44,0,0,
  	347,96,1,0,0,0,348,349,5,40,0,0,349,98,1,0,0,0,350,351,5,41,0,0,351,100,
  	1,0,0,0,352,353,5,35,0,0,353,102,1,0,0,0,354,355,5,45,0,0,355,104,1,0,
  	0,0,356,357,5,58,0,0,357,106,1,0,0,0,358,359,5,82,0,0,359,360,3,119,59,
  	0,360,108,1,0,0,0,361,362,5,71,0,0,362,363,5,66,0,0,363,110,1,0,0,0,364,
  	365,5,76,0,0,365,366,5,66,0,0,366,112,1,0,0,0,367,368,5,83,0,0,368,369,
  	5,80,0,0,369,114,1,0,0,0,370,371,5,110,0,0,371,372,5,117,0,0,372,373,
  	5,108,0,0,373,374,5,108,0,0,374,116,1,0,0,0,375,376,5,34,0,0,376,377,
  	3,125,62,0,377,378,5,34,0,0,378,118,1,0,0,0,379,381,7,0,0,0,380,379,1,
  	0,0,0,381,382,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,120,1,0,0,0,
  	384,386,7,0,0,0,385,384,1,0,0,0,386,387,1,0,0,0,387,385,1,0,0,0,387,388,
  	1,0,0,0,388,389,1,0,0,0,389,391,5,46,0,0,390,392,7,0,0,0,391,390,1,0,
  	0,0,392,393,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,122,1,0,0,0,395,
  	399,7,1,0,0,396,398,7,2,0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,
  	0,0,0,399,400,1,0,0,0,400,124,1,0,0,0,401,399,1,0,0,0,402,406,8,3,0,0,
  	403,404,5,92,0,0,404,406,9,0,0,0,405,402,1,0,0,0,405,403,1,0,0,0,406,
  	409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,126,1,0,0,0,409,407,1,
  	0,0,0,410,414,5,59,0,0,411,413,8,4,0,0,412,411,1,0,0,0,413,416,1,0,0,
  	0,414,412,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,
  	418,6,63,0,0,418,128,1,0,0,0,419,421,7,5,0,0,420,419,1,0,0,0,421,422,
  	1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,425,6,64,
  	0,0,425,130,1,0,0,0,426,428,5,13,0,0,427,426,1,0,0,0,427,428,1,0,0,0,
  	428,429,1,0,0,0,429,432,5,10,0,0,430,432,5,13,0,0,431,427,1,0,0,0,431,
  	430,1,0,0,0,432,132,1,0,0,0,11,0,382,387,393,399,405,407,414,422,427,
  	431,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  vmgrammarlexerLexerStaticData = std::move(staticData);
}

}

VMGrammarLexer::VMGrammarLexer(CharStream *input) : Lexer(input) {
  VMGrammarLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *vmgrammarlexerLexerStaticData->atn, vmgrammarlexerLexerStaticData->decisionToDFA, vmgrammarlexerLexerStaticData->sharedContextCache);
}

VMGrammarLexer::~VMGrammarLexer() {
  delete _interpreter;
}

std::string VMGrammarLexer::getGrammarFileName() const {
  return "VMGrammar.g4";
}

const std::vector<std::string>& VMGrammarLexer::getRuleNames() const {
  return vmgrammarlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& VMGrammarLexer::getChannelNames() const {
  return vmgrammarlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& VMGrammarLexer::getModeNames() const {
  return vmgrammarlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& VMGrammarLexer::getVocabulary() const {
  return vmgrammarlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView VMGrammarLexer::getSerializedATN() const {
  return vmgrammarlexerLexerStaticData->serializedATN;
}

const atn::ATN& VMGrammarLexer::getATN() const {
  return *vmgrammarlexerLexerStaticData->atn;
}




void VMGrammarLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  vmgrammarlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(vmgrammarlexerLexerOnceFlag, vmgrammarlexerLexerInitialize);
#endif
}
